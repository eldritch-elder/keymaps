#+title: keymaps
#+author: Freja

* Pre-stuff
** keymaps?
Yes, keymaps, QWERTY is boring and as someone who writes a lot on their keyboard, I wanted to spice up the game and use a better suited layout so I tried colemak.
Well, after a year or so, here I am, on my kyria, writing in hands down and thinking about trying out stenotype.
This document is intended to 1. *document* (pun intended) and 2. to generate working keymap files through literate programming for ~qmk~ and maybe even ~kmonad~ and ~zmk~, who knows what the future will bring up.
Maybe I'll go even more bollocks and write my stenolibrary i-- although, no, let's not do that.

** literate programming?
Literate programming is basically generating stuff using src code blocks in an markup/outline document.
This approach takes documentation extremly to the front and makes it easy to completely restructure the source and do my own stuff.
I can write code here which generates stuff which is used to generate stuff, it's very powerful and very convinient.
Simply said, this makes reading source like reading a book.
When I first started to go /deep/ into the abyss, I was shocked how some people just ignore documentation and make it a big mess, how some are using macros extensivelly which are defined /somewhere/ in ~users/~ and I wanted to do better.
I try to explain everything and make everything very clearly visible.
I kinda try to make it very automatic, so that you in the end only need to edit the [[*The keymap][data]] and you just need to tangle those using something like [[https://github.com/hlissner/doom-emacs/blob/develop/bin/org-tangle][this script]].
Some things like the filenames and the keyboard matrix are hardcoded and you need to go through the [[*Building][building]] to change those.

** how to use this document?
It's very straight forward, you edit the data, tangle the stuff and go for ~qmk compile~ or whatever you wanna do.
Be sure not to change anything in the [[*Building][building section]] unless you want to fork it since that might break stuff.
Currently the layout uses [[https://caniusevia.com/][via]] which enables us to set stuff the fast way without reflashing the firmware.
Not everything can be changed so if you need to set things like [[*encoders][encoders]], [[*combos][combos]], or oleds, you need to edit this file

* The keymap
** The layout
I primarily type in German, English and Swedish so the keyboard should be cabable or outputing the used characters like ~ü~ or ~å~.
For that I am using [[https://eurkey.steffen.bruentjen.eu/][EurKey]] - but US Intl should be fine too - on my system.  These are QWERTY layouts but they are able to output letters used in different languages using Alt Gr aka Right Alt.

** combos
Here, combos are a nice feature allowing to add keys at places where they don't impear your typing yet are comfortable to use

#+name: combo
#+begin_src C :main no :tangle no :results none
// combo part here
#+end_src

** encoder
Rotary encoders add a lot of features and functionality, they are extremly useful.
For me, I like to have volume control on one side and window control on the other.

Simple structure is the function ~encoder_update_user(index, clockwise)~, this runs a simple /this encoder does this when turned clockwise, this then otherwise/.
#+name: encoder
#+begin_src C :main no :tangle no :results none
bool is_alt_tab = false;
uint16_t alt_tab_timer = 0;

bool encoder_update_user(uint8_t index, bool clockwise) {
    if (index == 1) {
        if (clockwise) {
            tap_code(KC_VOLU);
        } else {
            tap_code(KC_VOLD);
        }
    } else if (index == 0) {
        if (clockwise) {
            if (!is_alt_tab) {
                is_alt_tab = true;
                register_code(KC_LALT);
            }
            alt_tab_timer = timer_read();
            tap_code16(KC_TAB);
        } else {
            if (!is_alt_tab) {
                is_alt_tab = true;
                register_code(KC_LALT);
            }
            alt_tab_timer = timer_read();
            tap_code16(S(KC_TAB));
        }
    }

    return false;
}

void matrix_scan_user(void) {
    if (is_alt_tab) {
        if (timer_elapsed(alt_tab_timer) > 1250) {
            unregister_code(KC_LALT);
            is_alt_tab = false;
        }
    }
}
#+end_src
* Building
** stuff
*** header
#+name: header
#+begin_src C :main no :tangle no :results none
/* vim:ro
 * -*- buffer-read-only: t -*-
 *
 * This is autogenerated using doom/org-tangle DO NOT EDIT.
 * Please refer to main.org in [[https://git.sr.ht/~jat/keymaps]]
 */
#+end_src

*** license
#+name: license
#+begin_src C :main no :tangle no :results none
/* Copyright 2021 Freja
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 #+end_src
*** matrix stuff
#+name: keymap
#+begin_src C :results none :main no :tangle no
enum layers {
    _base = 0,
    _game,
    _low,
    _high,
    _adj,
    _misc,
};

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
         [_base] = LAYOUT(_______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______),
         [_game] = LAYOUT(_______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______),
         [_low] = LAYOUT(_______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______),
         [_high] = LAYOUT(_______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______),
         [_adj] = LAYOUT(_______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______),
         [_misc] = LAYOUT(_______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______),
};
#+end_src

** putting it all together
*** keymap.c
#+begin_src C :noweb yes :tangle keymap.c
<<license>>
<<header>>

#include QMK_KEYBOARD_H

<<keymap>>

#ifdef ENCODER_ENABLE
<<encoder>>
#endif

#ifdef COMBO_ENABLE
<<combo>>
#endif
#+end_src

*** config
#+begin_src C :noweb yes :tangle config.h
<<license>>
<<header>>

#pragma once

#define EE_HANDS

#define TAPPING_TERM 400
#define IGNORE_MOD_TAP_INTERRUPT

#ifdef OLED_DRIVER_ENABLE
#    define OLED_DISPLAY_128X64
#endif

#ifdef NKRO_ENABLE
#    define FORCE_NKRO
#endif

#ifdef RGBLIGHT_ENABLE
#    define RGBLIGHT_SLEEP
#    define RGBLIGHT_EFFECT_BREATHING
#    define RGBLIGHT_EFFECT_RAINBOW_MOOD
#    define RGBLIGHT_EFFECT_RAINBOW_SWIRL
#    define RGBLIGHT_EFFECT_SNAKE
#    define RGBLIGHT_EFFECT_KNIGHT
#    define RGBLIGHT_EFFECT_STATIC_GRADIENT

#    define RGBLIGHT_HUE_STEP 8
#    define RGBLIGHT_SAT_STEP 8
#    define RGBLIGHT_VAL_STEP 8
#    define RGBLIGHT_LIMIT_VAL 150
#endif

#ifdef ENCODER_ENABLE
#define ENCODER_RESOLUTION 2
#define ENCODER_DIRECTION_FLIP
#endif


// define USB_POLLING_INTERVAL_MS 5
#+end_src

*** rules
#+begin_src C :tangle rules.mk
OLED_DRIVER_ENABLE = no
RGBLIGHT_ENABLE = yes
WPM_ENABLE = no
MOUSEKEY_ENABLE = no
NKRO_ENABLE = yes
COMBO_ENABLE = yes
VIA_ENABLE = yes
ENCODER_ENABLE = yes

BOOTLOADER=qmk-hid
BOOTLOADER_SIZE=512
#+end_src

#+RESULTS:

